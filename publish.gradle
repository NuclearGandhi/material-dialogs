apply from: '../gradle/dependencies.gradle'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

def getBintrayUserAndKey() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return [
            properties.getProperty("bintray.user"),
            properties.getProperty("bintray.apiKey")
    ]
}

if (shard == null) {
    throw new IllegalStateException("Must specify a shard in module's build.gradle")
} else if (versions == null || versions.publishVersion == null) {
    throw new IllegalStateException("Unable to reference publishVersion")
}

task checkBintrayConfig {
    doLast {
        def (user, key) = getBintrayUserAndKey()
        if (user == null || user.isEmpty() ||
                key == null || key.isEmpty()) {
            throw new IllegalStateException("Must specify Bintray user/API key in your local.properties.")
        }
    }
}

afterEvaluate {
    bintrayUpload.dependsOn checkBintrayConfig
}

publishing {
    publications {
        Production(MavenPublication) {
            artifact("$buildDir/outputs/aar/bottomsheettimerangepicker-release.aar")
            groupId 'com.nucleargandhi.material-dialogs-old'
            artifactId shard
            version versions.publishVersion

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                // Iterate over the implementation dependencies (we don't want the test ones),
                // adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included in the pom.
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

def (userS, keyS) = getBintrayUserAndKey()
bintray {
    user = userS
    key = keyS
    publications = ['Production']
    configurations = ['archives']
    dryRun = false
    override = false
    publish = true
    pkg {
        repo = 'material-dialogs-old' // the name of the repository you created on Bintray
        name = 'material-dialogs-old:%shard' // the name of the package you created inside it
        version {
            name = versions.publishVersion
            released = new Date()
            vcsTag = versions.publishVersion
        }
    }
}